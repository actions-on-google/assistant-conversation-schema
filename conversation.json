{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "$id": "https://raw.githubusercontent.com/actions-on-google/assistant-conversation-schema/master/conversation.json#",
  "title": "Actions SDK Fulfillment Conversational V3 Schema",
  "definitions": {
    "HandlerRequest": {
      "description": "Represents a request sent to a developer's fulfillment by Google.",
      "type": "object",
      "properties": {
        "handler": {
          "description": "Required. Information to fulfillment on how to handle the request. For example a request intending to get a fact might have a handler with a name of \"getFact\".",
          "$ref": "#/definitions/Handler"
        },
        "intent": {
          "description": "Required. Represents the last matched intent.",
          "$ref": "#/definitions/Intent"
        },
        "scene": {
          "description": "Optional. Info on the current and next scene when the function was called. Will be filled when the fulfillment call is made within the scope of a scene.",
          "$ref": "#/definitions/Scene"
        },
        "session": {
          "description": "Required. Holds session data like the session id and session parameters.",
          "$ref": "#/definitions/Session"
        },
        "user": {
          "description": "Required. User who initiated the conversation.",
          "$ref": "#/definitions/User"
        },
        "home": {
          "description": "Optional. Information related to the HomeGraph structure that the target device belongs to. See https://developers.google.com/actions/smarthome/concepts/homegraph.",
          "$ref": "#/definitions/Home"
        },
        "device": {
          "description": "Required. Info on the device the user is using to interact with the Action.",
          "$ref": "#/definitions/Device"
        },
        "context": {
          "description": "Optional. Information of current context of the request. Includes but isn't limited to active media session info or canvas info.",
          "$ref": "#/definitions/Context"
        }
      }
    },
    "Handler": {
      "description": "Represents a fulfillment handler that maps event information from Actions on Google to fulfillment. Use the handler name to determine what code you should run in fulfillment. For instance, a handler might be used to get information on a user's order information with a handler name like \"OrderLookup\" while another might get product information from a database, with a handler name like \"GetProductInfo\".",
      "type": "object",
      "properties": {
        "name": {
          "description": "Optional. The name of the handler.",
          "type": "string"
        }
      }
    },
    "Intent": {
      "description": "Represents an intent.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. The name of the last matched intent.",
          "type": "string"
        },
        "params": {
          "description": "Required. Represents parameters identified as part of intent matching. This is a map of the name of the identified parameter to the value of the parameter identified from user input. All parameters defined in the matched intent that are identified will be surfaced here.",
          "type": "object"
        },
        "query": {
          "description": "Optional. Typed or spoken input from the end user that matched this intent. This will be populated when an intent is matched, based on the user input.",
          "type": "string"
        }
      }
    },
    "IntentParameterValue": {
      "description": "Represents a value for intent parameter.",
      "type": "object",
      "properties": {
        "original": {
          "description": "Required. Original text value extracted from user utterance.",
          "type": "string"
        },
        "resolved": {
          "description": "Required. Structured value for parameter extracted from user input. This will only be populated if the parameter is defined in the matched intent and the value of the parameter could be identified during intent matching."
        }
      }
    },
    "Scene": {
      "description": "Represent a scene. Scenes can call fulfillment, add prompts, and collect slot values from the user. Scenes are triggered by events or intents and can trigger events and match intents to transition to other scenes.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. Name of the current scene.",
          "type": "string"
        },
        "slotFillingStatus": {
          "description": "Required. The current status of slot filling. This field is read-only.",
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "INITIALIZED",
            "COLLECTING",
            "FINALIZING",
            "FINAL"
          ]
        },
        "slots": {
          "description": "The slots associated with the current scene. Handler responses cannot return slots which were not sent in the request.",
          "type": "object"
        },
        "next": {
          "description": "Optional. Information on the scene to be executed next.",
          "$ref": "#/definitions/NextScene"
        }
      }
    },
    "Slot": {
      "description": "Represents a slot.",
      "type": "object",
      "properties": {
        "mode": {
          "description": "The mode of the slot (required or optional). Can be set by developer.",
          "type": "string",
          "enum": [
            "MODE_UNSPECIFIED",
            "OPTIONAL",
            "REQUIRED"
          ]
        },
        "status": {
          "description": "The status of the slot.",
          "type": "string",
          "enum": [
            "SLOT_UNSPECIFIED",
            "EMPTY",
            "INVALID",
            "FILLED"
          ]
        },
        "value": {
          "description": "The value of the slot. Changing this value in the response, will modify the value in slot filling."
        },
        "updated": {
          "description": "Indicates if the slot value was collected on the last turn. This field is read-only.",
          "type": "boolean"
        },
        "prompt": {
          "description": "Optional. This prompt is sent to the user when needed to fill a required slot. This prompt overrides the existing prompt defined in the console. This field is not included in the webhook request.",
          "$ref": "#/definitions/Prompt"
        }
      }
    },
    "Prompt": {
      "description": "Represent a response to a user.",
      "type": "object",
      "properties": {
        "override": {
          "description": "Optional. Mode for how this messages should be merged with previously defined messages. \"true\" clears all previously defined messages (first and last simple, content, suggestions link and canvas) and adds messages defined in this prompt. \"false\" adds messages defined in this prompt to messages defined in previous responses. Leaving this field to \"false\" also enables appending to some fields inside Simple prompts, the Suggestions prompt, and the Canvas prompt (part of the Content prompt). The Content and Link messages are always overwritten if defined in the prompt. Default value is \"false\".",
          "type": "boolean"
        },
        "firstSimple": {
          "description": "Optional. The first voice and text-only response.",
          "$ref": "#/definitions/Simple"
        },
        "content": {
          "description": "Optional. A content like a card, list or media to display to the user.",
          "$ref": "#/definitions/Content"
        },
        "lastSimple": {
          "description": "Optional. The last voice and text-only response.",
          "$ref": "#/definitions/Simple"
        },
        "suggestions": {
          "description": "Optional. Suggestions to be displayed to the user which will always appear at the end of the response. If the \"override\" field in the containing prompt is \"false\", the titles defined in this field will be added to titles defined in any previously defined suggestions prompts and duplicate values will be removed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Suggestion"
          }
        },
        "link": {
          "description": "Optional. An additional suggestion chip that can link out to the associated app or site. The chip will be rendered with the title \"Open <name>\". Max 20 chars.",
          "$ref": "#/definitions/Link"
        },
        "canvas": {
          "description": "Optional. Represents a Interactive Canvas response to be sent to the user.",
          "$ref": "#/definitions/Canvas"
        },
        "orderUpdate": {
          "description": "Optional Action responds with an OrderUpdate after receiving the order during the transactions flow. On receipt of this, Google records this update to the order, and if successful, displays a receipt card along with the TTS sent on display devices.",
          "$ref": "#/definitions/OrderUpdate"
        }
      }
    },
    "Simple": {
      "description": "Represents a simple prompt to be send to a user.",
      "type": "object",
      "properties": {
        "speech": {
          "description": "Optional. Represents the speech to be spoken to the user. Can be SSML or text to speech. If the \"override\" field in the containing prompt is \"true\", the speech defined in this field replaces the previous Simple prompt's speech.",
          "type": "string"
        },
        "text": {
          "description": "Optional text to display in the chat bubble. If not given, a display rendering of the speech field above will be used. Limited to 640 chars. If the \"override\" field in the containing prompt is \"true\", the text defined in this field replaces to the previous Simple prompt's text.",
          "type": "string"
        }
      }
    },
    "Content": {
      "type": "object",
      "properties": {
        "card": {
          "description": "A basic card.",
          "$ref": "#/definitions/Card"
        },
        "image": {
          "description": "An image.",
          "$ref": "#/definitions/Image"
        },
        "table": {
          "description": "Table card.",
          "$ref": "#/definitions/Table"
        },
        "media": {
          "description": "Response indicating a set of media to be played.",
          "$ref": "#/definitions/Media"
        },
        "collection": {
          "description": "A card presenting a collection of options to select from.",
          "$ref": "#/definitions/Collection"
        },
        "list": {
          "description": "A card presenting a list of options to select from.",
          "$ref": "#/definitions/List"
        }
      }
    },
    "Card": {
      "description": "A basic card for displaying some information, e.g. an image and/or text.",
      "type": "object",
      "properties": {
        "title": {
          "description": "Overall title of the card. Optional.",
          "type": "string"
        },
        "subtitle": {
          "description": "Optional.",
          "type": "string"
        },
        "text": {
          "description": "Body text of the card. Supports a limited set of markdown syntax for formatting. Required, unless image is present.",
          "type": "string"
        },
        "image": {
          "description": "A hero image for the card. The height is fixed to 192dp. Optional.",
          "$ref": "#/definitions/Image"
        },
        "imageFill": {
          "description": "How the image background will be filled. Optional.",
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "GRAY",
            "WHITE",
            "CROPPED"
          ]
        },
        "button": {
          "description": "Button. Optional.",
          "$ref": "#/definitions/Link"
        }
      }
    },
    "Image": {
      "description": "An image displayed in the card.",
      "type": "object",
      "properties": {
        "url": {
          "description": "The source url of the image. Images can be JPG, PNG and GIF (animated and non-animated). For example,`https://www.agentx.com/logo.png`. Required.",
          "type": "string"
        },
        "alt": {
          "description": "A text description of the image to be used for accessibility, e.g. screen readers. Required.",
          "type": "string"
        },
        "height": {
          "description": "The height of the image in pixels. Optional.",
          "type": "integer",
          "format": "int32"
        },
        "width": {
          "description": "The width of the image in pixels. Optional.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the link",
          "type": "string"
        },
        "open": {
          "description": "What happens when a user opens the link",
          "$ref": "#/definitions/OpenUrl"
        }
      }
    },
    "OpenUrl": {
      "type": "object",
      "properties": {
        "url": {
          "description": "The url field which could be any of: - http/https urls for opening an App-linked App or a webpage",
          "type": "string"
        },
        "hint": {
          "description": "Indicates a hint for the url type.",
          "type": "string",
          "enum": [
            "LINK_UNSPECIFIED",
            "AMP"
          ]
        }
      }
    },
    "Table": {
      "description": "A table card for displaying a table of text.",
      "type": "object",
      "properties": {
        "title": {
          "description": "Overall title of the table. Optional but must be set if subtitle is set.",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle for the table. Optional.",
          "type": "string"
        },
        "image": {
          "description": "Image associated with the table. Optional.",
          "$ref": "#/definitions/Image"
        },
        "columns": {
          "description": "Headers and alignment of columns.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableColumn"
          }
        },
        "rows": {
          "description": "Row data of the table. The first 3 rows are guaranteed to be shown but others might be cut on certain surfaces. Please test with the simulator to see which rows will be shown for a given surface. On surfaces that support the WEB_BROWSER capability, you can point the user to a web page with more data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableRow"
          }
        },
        "button": {
          "description": "Button.",
          "$ref": "#/definitions/Link"
        }
      }
    },
    "TableColumn": {
      "type": "object",
      "properties": {
        "header": {
          "description": "Header text for the column.",
          "type": "string"
        },
        "align": {
          "description": "Horizontal alignment of content w.r.t column. If unspecified, content will be aligned to the leading edge.",
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "LEADING",
            "CENTER",
            "TRAILING"
          ]
        }
      }
    },
    "TableRow": {
      "description": "Describes a row in the table.",
      "type": "object",
      "properties": {
        "cells": {
          "description": "Cells in this row. The first 3 cells are guaranteed to be shown but others might be cut on certain surfaces. Please test with the simulator to see which cells will be shown for a given surface.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableCell"
          }
        },
        "divider": {
          "description": "Indicates whether there should be a divider after each row.",
          "type": "boolean"
        }
      }
    },
    "TableCell": {
      "description": "Describes a cell in a row.",
      "type": "object",
      "properties": {
        "text": {
          "description": "Text content of the cell.",
          "type": "string"
        }
      }
    },
    "Media": {
      "description": "Represents one media object. Contains information about the media, such as name, description, url, etc.",
      "type": "object",
      "properties": {
        "mediaType": {
          "type": "string",
          "enum": [
            "MEDIA_TYPE_UNSPECIFIED",
            "AUDIO",
            "MEDIA_STATUS_ACK"
          ]
        },
        "startOffset": {
          "description": "Start offset of the first media object.",
          "type": "string",
          "format": "google-duration"
        },
        "optionalMediaControls": {
          "description": "Optional media control types this media response session can support. If set, request will be made to 3p when a certain media event happens. If not set, 3p must still handle two default control type, FINISHED and FAILED.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "OPTIONAL_MEDIA_CONTROLS_UNSPECIFIED",
              "PAUSED",
              "STOPPED"
            ]
          }
        },
        "mediaObjects": {
          "description": "List of Media Objects",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaObject"
          }
        }
      }
    },
    "MediaObject": {
      "description": "Represents a single media object",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of this media object.",
          "type": "string"
        },
        "description": {
          "description": "Description of this media object.",
          "type": "string"
        },
        "url": {
          "description": "The url pointing to the media content.",
          "type": "string"
        },
        "image": {
          "description": "Image to show with the media card.",
          "$ref": "#/definitions/MediaImage"
        }
      }
    },
    "MediaImage": {
      "type": "object",
      "properties": {
        "large": {
          "description": "A large image, such as the cover of the album, etc.",
          "$ref": "#/definitions/Image"
        },
        "icon": {
          "description": "A small image icon displayed on the right from the title. It's resized to 36x36 dp.",
          "$ref": "#/definitions/Image"
        }
      }
    },
    "Collection": {
      "description": "A card for presenting a collection of options to select from.",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the collection. Optional.",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the collection. Optional.",
          "type": "string"
        },
        "items": {
          "description": "min: 2 max: 10",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CollectionItem"
          }
        },
        "imageFill": {
          "description": "How the image backgrounds of collection items will be filled. Optional.",
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "GRAY",
            "WHITE",
            "CROPPED"
          ]
        }
      }
    },
    "CollectionItem": {
      "description": "An item in the collection",
      "type": "object",
      "properties": {
        "key": {
          "description": "Required. The NLU key that matches the entry key name in the associated Type.",
          "type": "string"
        }
      }
    },
    "List": {
      "description": "A card for presenting a list of options to select from.",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the list. Optional.",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the list. Optional.",
          "type": "string"
        },
        "items": {
          "description": "min: 2 max: 30",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListItem"
          }
        }
      }
    },
    "ListItem": {
      "description": "An item in the list",
      "type": "object",
      "properties": {
        "key": {
          "description": "Required. The NLU key that matches the entry key name in the associated Type.",
          "type": "string"
        }
      }
    },
    "Suggestion": {
      "type": "object",
      "properties": {
        "title": {
          "description": "Required. The text shown in the suggestion chip. When tapped, this text will be posted back to the conversation verbatim as if the user had typed it. Each title must be unique among the set of suggestion chips. Max 25 chars",
          "type": "string"
        }
      }
    },
    "Canvas": {
      "description": "Represents an Interactive Canvas response to be sent to the user.\nThis can be used in conjunction with the \"first_simple\" field in the\ncontaining prompt to speak to the user in addition to displaying a\ninteractive canvas response. The maximum size of the response is 50k bytes.",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL of the interactive canvas web app to load. If not set, the url from\ncurrent active canvas will be reused.",
          "type": "string"
        },
        "data": {
          "description": "Optional. JSON data to be passed through to the immersive experience\nweb page as an event.\nIf the \"override\" field in the containing prompt is \"false\" data values\ndefined in this Canvas prompt will be added after data values defined in\nprevious Canvas prompts.",
          "type": "array"
        },
        "suppressMic": {
          "description": "Optional. Default value: false.",
          "type": "boolean"
        }
      }
    },
    "OrderUpdate": {
      "description": "Update to an order.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Deprecated: Use OrderUpdate.update_mask instead. If type = SNAPSHOT, OrderUpdate.order should be the entire order. If type = ORDER_STATUS, this is the order level status change. Only order.last_update_time and this vertical status are picked up. Note: type.ORDER_STATUS only supports PurcahaseOrderExtension status updates and there is no plan to extend this support. Instead, we recommend using update_mask as it is more generic, extensible and can be used for all verticals.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "ORDER_STATUS",
            "SNAPSHOT"
          ]
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "updateMask": {
          "description": "Note: There are following consideration/recommendations for following special fields: 1. order.last_update_time will always be updated as part of the update request. 2. order.create_time, order.google_order_id and order.merchant_order_id will be ignored if provided as part of the update_mask.",
          "type": "string",
          "format": "google-fieldmask"
        },
        "userNotification": {
          "description": "If specified, displays a notification to the user with the specified title and text. Specifying a notification is a suggestion to notify and is not guaranteed to result in a notification.",
          "$ref": "#/definitions/UserNotification"
        },
        "reason": {
          "description": "Reason for the change/update.",
          "type": "string"
        }
      }
    },
    "Order": {
      "description": "Order entity. Note: 1. All strings at all levels must be less than 1000 chars unless otherwise specified. 2. All repeated fields at all levels must be less than 50 in count unless otherwise specified. 3. All timestamps at all levels, if specified, must be valid timestamps.",
      "type": "object",
      "properties": {
        "googleOrderId": {
          "description": "Google assigned order id.",
          "type": "string"
        },
        "merchantOrderId": {
          "description": "Required: Merchant assigned internal order id. This id must be unique, and is required for subsequent order update operations. This id may be set to the provided google_order_id, or any other unique value. Note that the id presented to users is the user_visible_order_id, which may be a different, more user-friendly value. Max allowed length is 128 chars.",
          "type": "string"
        },
        "userVisibleOrderId": {
          "description": "The user facing id referencing to current order. This id should be consistent with the id displayed for this order in other contexts, including websites, apps and email.",
          "type": "string"
        },
        "userVisibleStateLabel": {
          "description": "Deprecated: Use OrderExtensions status instead. User visible label for the state of this order.",
          "type": "string"
        },
        "buyerInfo": {
          "description": "Info about the buyer.",
          "$ref": "#/definitions/UserInfo"
        },
        "image": {
          "description": "Image associated with the order.",
          "$ref": "#/definitions/V2UiElementsImage"
        },
        "createTime": {
          "description": "Required: Date and time the order was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "lastUpdateTime": {
          "description": "Date and time the order was last updated. Required for OrderUpdate.",
          "type": "string",
          "format": "google-datetime"
        },
        "transactionMerchant": {
          "description": "Merchant that facilitated the checkout. This could be different from a line item level provider. Example: Expedia Order with line item from ANA.",
          "$ref": "#/definitions/Merchant"
        },
        "contents": {
          "description": "Required: Order contents which is a group of line items.",
          "$ref": "#/definitions/Contents"
        },
        "priceAttributes": {
          "description": "Price, discounts, taxes and so on.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAttribute"
          }
        },
        "followUpActions": {
          "description": "Follow up actions at order level.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          }
        },
        "paymentData": {
          "description": "Payment related data for the order.",
          "$ref": "#/definitions/PaymentData"
        },
        "termsOfServiceUrl": {
          "description": "A link to the terms of service that apply to order/proposed order.",
          "type": "string"
        },
        "note": {
          "description": "Notes attached to an order.",
          "type": "string"
        },
        "promotions": {
          "description": "All promotions that are associated with this order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Promotion"
          }
        },
        "disclosures": {
          "description": "Disclosures associated with this order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Disclosure"
          }
        },
        "purchase": {
          "description": "Purchase order",
          "$ref": "#/definitions/PurchasePurchaseOrderExtension"
        },
        "ticket": {
          "description": "Ticket order",
          "$ref": "#/definitions/TicketTicketOrderExtension"
        },
        "vertical": {
          "description": "Deprecated: Use verticals instead. These properties will apply to all line items, unless overridden in some line item. This vertical must match the line item level vertical type. Possible values: google.actions.orders.v3.verticals.purchase.PurchaseOrderExtension google.actions.orders.v3.verticals.ticket.TicketOrderExtension",
          "type": "object"
        }
      }
    },
    "UserInfo": {
      "description": "Information about user. This is used to represent information of the user associated with an order.",
      "type": "object",
      "properties": {
        "email": {
          "description": "User email, Eg: janedoe@gmail.com.",
          "type": "string"
        },
        "firstName": {
          "description": "First name of the user.",
          "type": "string"
        },
        "lastName": {
          "description": "Last name of the user.",
          "type": "string"
        },
        "displayName": {
          "description": "Display name of the user, might be different from first or last name.",
          "type": "string"
        },
        "phoneNumbers": {
          "description": "Phone numbers of the user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhoneNumber"
          }
        }
      }
    },
    "PhoneNumber": {
      "description": "Standard phone number representation.",
      "type": "object",
      "properties": {
        "e164PhoneNumber": {
          "description": "Phone number in E.164 format, as defined in International Telecommunication Union (ITU) Recommendation E.164. wiki link: https://en.wikipedia.org/wiki/E.164",
          "type": "string"
        },
        "extension": {
          "description": "Extension is not standardized in ITU recommendations, except for being defined as a series of numbers with a maximum length of 40 digits. It is defined as a string here to accommodate for the possible use of a leading zero in the extension (organizations have complete freedom to do so, as there is no standard defined). Other than digits, some other dialling characters such as \",\" (indicating a wait) may be stored here. For example, in xxx-xxx-xxxx ext. 123, \"123\" is the extension.",
          "type": "string"
        },
        "preferredDomesticCarrierCode": {
          "description": "The carrier selection code that is preferred when calling this phone number domestically. This also includes codes that need to be dialed in some countries when calling from landlines to mobiles or vice versa. For example, in Columbia, a \"3\" needs to be dialed before the phone number itself when calling from a mobile phone to a domestic landline phone and vice versa. https://en.wikipedia.org/wiki/Telephone_numbers_in_Colombia https://en.wikipedia.org/wiki/Brazilian_Carrier_Selection_Code Note this is the \"preferred\" code, which means other codes may work as well.",
          "type": "string"
        }
      }
    },
    "V2UiElementsImage": {
      "description": "An image displayed in the card.",
      "type": "object",
      "properties": {
        "url": {
          "description": "The source url of the image. Images can be JPG, PNG and GIF (animated and non-animated). For example,`https://www.agentx.com/logo.png`. Required.",
          "type": "string"
        },
        "accessibilityText": {
          "description": "A text description of the image to be used for accessibility, e.g. screen readers. Required.",
          "type": "string"
        },
        "height": {
          "description": "The height of the image in pixels. Optional.",
          "type": "integer",
          "format": "int32"
        },
        "width": {
          "description": "The width of the image in pixels. Optional.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Merchant": {
      "description": "Merchant for the cart/order/line item.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Optional ID assigned to merchant if any.",
          "type": "string"
        },
        "name": {
          "description": "The name of the merchant like \"Panera Bread\".",
          "type": "string"
        },
        "image": {
          "description": "The image associated with the merchant.",
          "$ref": "#/definitions/V2UiElementsImage"
        },
        "phoneNumbers": {
          "description": "Merchant's phone numbers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhoneNumber"
          }
        },
        "address": {
          "description": "Merchant's address.",
          "$ref": "#/definitions/V2Location"
        }
      }
    },
    "V2Location": {
      "description": "Container that represents a location.",
      "type": "object",
      "properties": {
        "coordinates": {
          "description": "Geo coordinates. Requires the DEVICE_PRECISE_LOCATION permission.",
          "$ref": "#/definitions/LatLng"
        },
        "formattedAddress": {
          "description": "Display address, e.g., \"1600 Amphitheatre Pkwy, Mountain View, CA 94043\". Requires the DEVICE_PRECISE_LOCATION permission.",
          "type": "string"
        },
        "zipCode": {
          "description": "Zip code. Requires the DEVICE_PRECISE_LOCATION or DEVICE_COARSE_LOCATION permission.",
          "type": "string"
        },
        "city": {
          "description": "City. Requires the DEVICE_PRECISE_LOCATION or DEVICE_COARSE_LOCATION permission.",
          "type": "string"
        },
        "postalAddress": {
          "description": "Postal address. Requires the DEVICE_PRECISE_LOCATION or DEVICE_COARSE_LOCATION permission.",
          "$ref": "#/definitions/PostalAddress"
        },
        "name": {
          "description": "Name of the place.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Phone number of the location, e.g. contact number of business location or phone number for delivery location.",
          "type": "string"
        },
        "notes": {
          "description": "Notes about the location.",
          "type": "string"
        },
        "placeId": {
          "description": "place_id is used with Places API to fetch details of a place. See https://developers.google.com/places/web-service/place-id",
          "type": "string"
        }
      }
    },
    "LatLng": {
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard. Values must be within normalized ranges.",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "type": "number",
          "format": "double"
        }
      }
    },
    "PostalAddress": {
      "description": "Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an i18n-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478",
      "type": "object",
      "properties": {
        "revision": {
          "description": "The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.",
          "type": "integer",
          "format": "int32"
        },
        "regionCode": {
          "description": "Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.",
          "type": "string"
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".",
          "type": "string"
        },
        "postalCode": {
          "description": "Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).",
          "type": "string"
        },
        "sortingCode": {
          "description": "Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire).",
          "type": "string"
        },
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.",
          "type": "string"
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.",
          "type": "string"
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.",
          "type": "string"
        },
        "addressLines": {
          "description": "Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recipients": {
          "description": "Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "organization": {
          "description": "Optional. The name of the organization at the address.",
          "type": "string"
        }
      }
    },
    "Contents": {
      "description": "Wrapper for line items.",
      "type": "object",
      "properties": {
        "lineItems": {
          "description": "List of order line items. At least 1 line_item is required and at-most 50 is allowed. All line items must belong to same vertical.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineItem"
          }
        }
      }
    },
    "LineItem": {
      "description": "One line item contains one vertical. An order or cart can have multiple line items of same vertical. Sub-line items/add-ons etc should be defined in vertical protos depending on their use cases. Note: 1. All strings at all levels must be less than 1000 chars unless otherwise specified. 2. All repeated fields at all levels must be less than 50 in count unless otherwise specified. 3. All timestamps at all levels, if specified, must be valid timestamps.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Required: Merchant assigned identifier for line item. Used for identifying existing line item in applying partial updates. Max allowed length is 64 chars.",
          "type": "string"
        },
        "name": {
          "description": "Name of line item as displayed on the receipt. Max allowed length is 100 chars.",
          "type": "string"
        },
        "userVisibleStateLabel": {
          "description": "Deprecated. Use vertical level status instead. For example, for purchases, use PurchaseOrderExtension.status. User visible label for the state of this line item.",
          "type": "string"
        },
        "provider": {
          "description": "The provider of the particular line item, if different from the overall order. Example: Expedia Order with line item provider ANA.",
          "$ref": "#/definitions/Merchant"
        },
        "priceAttributes": {
          "description": "Line item level price and adjustments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAttribute"
          }
        },
        "followUpActions": {
          "description": "Follow up actions at line item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          }
        },
        "recipients": {
          "description": "Line item level customers, this could be different from Order level buyer. Example: User X made restaurant reservation under name of user Y.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInfo"
          }
        },
        "image": {
          "description": "Small image associated with this item, if any.",
          "$ref": "#/definitions/V2UiElementsImage"
        },
        "description": {
          "description": "Line item description.",
          "type": "string"
        },
        "notes": {
          "description": "Additional notes applicable to this particular line item, for example cancellation policy.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disclosures": {
          "description": "Disclosures associated with this line item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Disclosure"
          }
        },
        "purchase": {
          "description": "Purchase orders like goods, food etc.",
          "$ref": "#/definitions/PurchasePurchaseItemExtension"
        },
        "reservation": {
          "description": "Reservation orders like restaurant, haircut etc.",
          "$ref": "#/definitions/ReservationReservationItemExtension"
        },
        "vertical": {
          "description": "Deprecated: Use verticals instead. Required: Semantic Contents of line item based on its type/vertical. Every vertical should include its own fulfillment details. Must be either one of the following values: google.actions.orders.v3.verticals.purchase.PurchaseItemExtension google.actions.orders.v3.verticals.reservation.ReservationItemExtension google.actions.orders.v3.verticals.ticket.TicketItemExtension",
          "type": "object"
        }
      }
    },
    "PriceAttribute": {
      "description": "Price attribute of an order or a line item.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Required: Type of money attribute.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "REGULAR",
            "DISCOUNT",
            "TAX",
            "DELIVERY",
            "SUBTOTAL",
            "FEE",
            "GRATUITY",
            "TOTAL"
          ]
        },
        "name": {
          "description": "Required: User displayed string of the price attribute. This is sent and localized by merchant.",
          "type": "string"
        },
        "id": {
          "description": "Optional: Id of the lineitem to which this price corresponds.",
          "type": "string"
        },
        "state": {
          "description": "Required: State of the price: Estimate vs Actual.",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "ESTIMATE",
            "ACTUAL"
          ]
        },
        "amount": {
          "description": "Monetary amount.",
          "$ref": "#/definitions/Money"
        },
        "amountMillipercentage": {
          "description": "The percentage spec, to 1/1000th of a percent. Eg: 8.750% is represented as 8750, negative percentages represent percentage discounts. Deprecating this field. Can consider adding back when a solid usecase is required.",
          "type": "integer",
          "format": "int32"
        },
        "taxIncluded": {
          "description": "Whether the price is tax included.",
          "type": "boolean"
        }
      }
    },
    "Money": {
      "description": "Represents an amount of money with its currency type.",
      "type": "object",
      "properties": {
        "currencyCode": {
          "description": "The 3-letter currency code defined in ISO 4217.",
          "type": "string"
        },
        "amountInMicros": {
          "description": "Amount in micros. For example, this field should be set as 1990000 for $1.99.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "Action": {
      "description": "A follow-up action associated with the order or line item.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Required: Type of action.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "VIEW_DETAILS",
            "MODIFY",
            "CANCEL",
            "RETURN",
            "EXCHANGE",
            "EMAIL",
            "CALL",
            "REORDER",
            "REVIEW",
            "CUSTOMER_SERVICE",
            "FIX_ISSUE",
            "DIRECTION"
          ]
        },
        "title": {
          "description": "Title or label of the action, displayed to the user. Max allowed length is 100 chars.",
          "type": "string"
        },
        "openUrlAction": {
          "description": "Action to take.",
          "$ref": "#/definitions/V2UiElementsOpenUrlAction"
        },
        "actionMetadata": {
          "description": "Metadata associated with an action.",
          "$ref": "#/definitions/ActionMetadata"
        }
      }
    },
    "V2UiElementsOpenUrlAction": {
      "description": "Opens the given url.",
      "type": "object",
      "properties": {
        "url": {
          "description": "The url field which could be any of: - http/https urls for opening an App-linked App or a webpage",
          "type": "string"
        },
        "androidApp": {
          "description": "Information about the Android App if the URL is expected to be fulfilled by an Android App.",
          "$ref": "#/definitions/V2DevicesAndroidApp"
        },
        "urlTypeHint": {
          "description": "Indicates a hint for the url type.",
          "type": "string",
          "enum": [
            "URL_TYPE_HINT_UNSPECIFIED",
            "AMP_CONTENT"
          ]
        }
      }
    },
    "V2DevicesAndroidApp": {
      "description": "Specification of the Android App for fulfillment restrictions",
      "type": "object",
      "properties": {
        "packageName": {
          "description": "Package name Package name must be specified when specifing Android Fulfillment.",
          "type": "string"
        },
        "versions": {
          "description": "When multiple filters are specified, any filter match will trigger the app.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/V2DevicesVersionFilter"
          }
        }
      }
    },
    "V2DevicesVersionFilter": {
      "description": "VersionFilter should be included if specific version/s of the App are required.",
      "type": "object",
      "properties": {
        "minVersion": {
          "description": "Min version code or 0, inclusive.",
          "type": "integer",
          "format": "int32"
        },
        "maxVersion": {
          "description": "Max version code, inclusive. The range considered is [min_version:max_version]. A null range implies any version. Examples: To specify a single version use: [target_version:target_version]. To specify any version leave min_version and max_version unspecified. To specify all versions until max_version, leave min_version unspecified. To specify all versions from min_version, leave max_version unspecified.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ActionMetadata": {
      "description": "Related Metadata per action.",
      "type": "object",
      "properties": {
        "expireTime": {
          "description": "Time when this action will expire.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "Disclosure": {
      "description": "A product, service or policy disclosure that may be presented to the user.",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the disclosure. Example: \"Safety information\".",
          "type": "string"
        },
        "disclosureText": {
          "description": "Content of the disclosure. Weblinks are allowed.",
          "$ref": "#/definitions/DisclosureText"
        },
        "presentationOptions": {
          "description": "Presentation options for the disclosure.",
          "$ref": "#/definitions/DisclosurePresentationOptions"
        }
      }
    },
    "DisclosureText": {
      "description": "Represents a plain text with web links.",
      "type": "object",
      "properties": {
        "template": {
          "description": "Text to display, containing placeholders like \"{0}\" and \"{1}\" for each textlink that should be inserted. Example: \"WARNING: This product can expose you to chemicals which are known to the State of California to cause cancer. For more information go to {0}.\" This disclosure text must not contain any promotional or ad-like content.",
          "type": "string"
        },
        "textLinks": {
          "description": "Text links that should be substituted into the template. The first one will be substituted for \"{0}\" in the template string, and the second one for \"{1}\", etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextLink"
          }
        }
      }
    },
    "TextLink": {
      "description": "A text link that should be substituted into the template.",
      "type": "object",
      "properties": {
        "displayText": {
          "description": "Text that should be displayed to users.",
          "type": "string"
        },
        "url": {
          "description": "URL to which users should be directed when the link is activated.",
          "type": "string"
        }
      }
    },
    "DisclosurePresentationOptions": {
      "description": "Options for the presentation of a disclosure.",
      "type": "object",
      "properties": {
        "presentationRequirement": {
          "description": "Presentation requirement of the disclosure.",
          "type": "string",
          "enum": [
            "REQUIREMENT_UNSPECIFIED",
            "REQUIREMENT_OPTIONAL",
            "REQUIREMENT_REQUIRED"
          ]
        },
        "initiallyExpanded": {
          "description": "Whether the content of the disclosure should be initially expanded. By default, it is initially collapsed.",
          "type": "boolean"
        }
      }
    },
    "PurchasePurchaseItemExtension": {
      "description": "Line item contents of Purchase Vertical.",
      "type": "object",
      "properties": {
        "status": {
          "description": "Required: Line item level status.",
          "type": "string",
          "enum": [
            "PURCHASE_STATUS_UNSPECIFIED",
            "READY_FOR_PICKUP",
            "SHIPPED",
            "DELIVERED",
            "OUT_OF_STOCK",
            "IN_PREPARATION",
            "CREATED",
            "CONFIRMED",
            "REJECTED",
            "RETURNED",
            "CANCELLED",
            "CHANGE_REQUESTED"
          ]
        },
        "userVisibleStatusLabel": {
          "description": "Required: User visible label/string for the status. Max allowed length is 50 chars.",
          "type": "string"
        },
        "type": {
          "description": "Required: Type of purchase.",
          "type": "string",
          "enum": [
            "PURCHASE_TYPE_UNSPECIFIED",
            "RETAIL",
            "FOOD",
            "GROCERY",
            "MOBILE_RECHARGE"
          ]
        },
        "productId": {
          "description": "Product or offer id associated with this line item.",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of the item.",
          "type": "integer",
          "format": "int32"
        },
        "unitMeasure": {
          "description": "Unit measure. Specifies the size of the item in chosen units. The size, together with the active price is used to determine the unit price.",
          "$ref": "#/definitions/PurchaseMerchantUnitMeasure"
        },
        "returnsInfo": {
          "description": "Returns info for this line item. If unset, this line item inherits order level returns info.",
          "$ref": "#/definitions/PurchasePurchaseReturnsInfo"
        },
        "fulfillmentInfo": {
          "description": "Fulfillment info for this line item. If unset, this line item inherits order level fulfillment info.",
          "$ref": "#/definitions/PurchasePurchaseFulfillmentInfo"
        },
        "itemOptions": {
          "description": "Additional add-ons or sub-items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchaseItemOption"
          }
        },
        "productDetails": {
          "description": "Details about the product.",
          "$ref": "#/definitions/PurchaseProductDetails"
        },
        "extension": {
          "description": "Any extra fields exchanged between merchant and google. Note: Use of this extension is highly discouraged. Based on the use-case/circumstances, consider one of the following: 1. Define fields in the PurchaseItemExtension if it could be used for other use-cases (ie. generic capability/functionality). 2. Use vertical_extension if it is specific to a custom, non-generic use-case/feature.",
          "type": "object"
        }
      }
    },
    "PurchaseMerchantUnitMeasure": {
      "description": "Merchant unit pricing measure.",
      "type": "object",
      "properties": {
        "measure": {
          "description": "Value: Example 1.2.",
          "type": "number",
          "format": "double"
        },
        "unit": {
          "description": "Unit: Example POUND, GRAM.",
          "type": "string",
          "enum": [
            "UNIT_UNSPECIFIED",
            "MILLIGRAM",
            "GRAM",
            "KILOGRAM",
            "OUNCE",
            "POUND"
          ]
        }
      }
    },
    "PurchasePurchaseReturnsInfo": {
      "description": "Returns info associated with an order or a particular line item.",
      "type": "object",
      "properties": {
        "isReturnable": {
          "description": "If true, return is allowed.",
          "type": "boolean"
        },
        "daysToReturn": {
          "description": "Return is allowed within that many days.",
          "type": "integer",
          "format": "int32"
        },
        "policyUrl": {
          "description": "Link to the return policy.",
          "type": "string"
        }
      }
    },
    "PurchasePurchaseFulfillmentInfo": {
      "description": "Fulfillment info associated with a purchase order or a particular line item.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier for this service option.",
          "type": "string"
        },
        "fulfillmentType": {
          "description": "Required: The type of fulfillment.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "DELIVERY",
            "PICKUP"
          ]
        },
        "expectedFulfillmentTime": {
          "description": "A window if a time-range is specified or ETA if single time specified. Expected delivery or pickup time.",
          "$ref": "#/definitions/Time"
        },
        "expectedPreparationTime": {
          "description": "A window if a time-range is specified or ETA if single time specified. Expected time to prepare the food. Single-time preferred.",
          "$ref": "#/definitions/Time"
        },
        "location": {
          "description": "Pickup or delivery location.",
          "$ref": "#/definitions/V2Location"
        },
        "expireTime": {
          "description": "Time at which this fulfillment option expires.",
          "type": "string",
          "format": "google-datetime"
        },
        "price": {
          "description": "Cost of this option.",
          "$ref": "#/definitions/PriceAttribute"
        },
        "fulfillmentContact": {
          "description": "User contact for this fulfillment.",
          "$ref": "#/definitions/UserInfo"
        },
        "shippingMethodName": {
          "description": "Name of the shipping method selected by the user.",
          "type": "string"
        },
        "storeCode": {
          "description": "StoreCode of the location. Example: Walmart is the merchant and store_code is the walmart store where fulfillment happened. https://support.google.com/business/answer/3370250?ref_topic=4596653.",
          "type": "string"
        },
        "pickupInfo": {
          "description": "Additional information regarding how order would be picked. This field would only be applicable when fulfillment type is PICKUP.",
          "$ref": "#/definitions/PurchasePickupInfo"
        }
      }
    },
    "Time": {
      "description": "Time construct to represent time of an event to use when displaying an order to the user.",
      "type": "object",
      "properties": {
        "timeIso8601": {
          "description": "Represents an order-event time like reservation time, delivery time and so on. Could be a duration (start & end time), just the date, date time etc. Refer https://en.wikipedia.org/wiki/ISO_8601 for all supported formats.",
          "type": "string"
        }
      }
    },
    "PurchasePickupInfo": {
      "description": "Details about how an order is picked up. It includes details such as pickup type and additional metadata attached with each type, if any.",
      "type": "object",
      "properties": {
        "pickupType": {
          "description": "Pick up method, such as INSTORE, CURBSIDE etc.",
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "INSTORE",
            "CURBSIDE"
          ]
        },
        "curbsideInfo": {
          "description": "Details specific to the curbside information. If pickup_type is not \"CURBSIDE\", this field would be ignored.",
          "$ref": "#/definitions/PurchaseCurbsideInfo"
        },
        "checkInInfo": {
          "description": "List of various methods supported by partner to support check-in.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommonCheckInInfo"
          }
        }
      }
    },
    "PurchaseCurbsideInfo": {
      "description": "Details about how curbside order would be facilitated.",
      "type": "object",
      "properties": {
        "curbsideFulfillmentType": {
          "description": "Partners need additional information to facilitate curbside pickup orders. Depending upon what fulfillment type is chosen, corresponding details would be collected from the user.",
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "VEHICLE_DETAIL"
          ]
        },
        "userVehicle": {
          "description": "Vehicle details of the user placing the order.",
          "$ref": "#/definitions/CommonVehicle"
        }
      }
    },
    "CommonVehicle": {
      "description": "Details about a vehicle",
      "type": "object",
      "properties": {
        "make": {
          "description": "Vehicle make (e.g. \"Honda\"). This is displayed to the user and must be localized. Required.",
          "type": "string"
        },
        "model": {
          "description": "Vehicle model (e.g. \"Grom\"). This is displayed to the user and must be localized. Required.",
          "type": "string"
        },
        "licensePlate": {
          "description": "Vehicle license plate number (e.g. \"1ABC234\"). Required.",
          "type": "string"
        },
        "colorName": {
          "description": "Vehicle color name, eg. black Optional.",
          "type": "string"
        },
        "image": {
          "description": "URL to a photo of the vehicle. The photo will be displayed at approximately 256x256px. Must be a jpg or png. Optional.",
          "$ref": "#/definitions/V2UiElementsImage"
        }
      }
    },
    "CommonCheckInInfo": {
      "description": "Metadata required by partner to support a checkin method.",
      "type": "object",
      "properties": {
        "checkInType": {
          "description": "Method used to send checkin instructions.",
          "type": "string",
          "enum": [
            "CHECK_IN_TYPE_UNSPECIFIED",
            "EMAIL",
            "SMS"
          ]
        }
      }
    },
    "PurchaseItemOption": {
      "description": "Represents add-ons or sub-items.",
      "type": "object",
      "properties": {
        "id": {
          "description": "For options that are items, unique item id.",
          "type": "string"
        },
        "name": {
          "description": "Option name.",
          "type": "string"
        },
        "prices": {
          "description": "Option total price.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAttribute"
          }
        },
        "note": {
          "description": "Note related to the option.",
          "type": "string"
        },
        "quantity": {
          "description": "For options that are items, quantity.",
          "type": "integer",
          "format": "int32"
        },
        "productId": {
          "description": "Product or offer id associated with this option.",
          "type": "string"
        },
        "subOptions": {
          "description": "To define other nested sub options.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchaseItemOption"
          }
        }
      }
    },
    "PurchaseProductDetails": {
      "description": "Details about the product.",
      "type": "object",
      "properties": {
        "productId": {
          "description": "Product or offer id associated with this line item.",
          "type": "string"
        },
        "gtin": {
          "description": "Global Trade Item Number of the product. Useful if offerId is not present in Merchant Center. Optional.",
          "type": "string"
        },
        "plu": {
          "description": "Price look-up codes, commonly called PLU codes, PLU numbers, PLUs, produce codes, or produce labels, are a system of numbers that uniquely identify bulk produce sold in grocery stores and supermarkets.",
          "type": "string"
        },
        "productType": {
          "description": "Product category defined by the merchant. E.g. \"Home > Grocery > Dairy & Eggs > Milk > Whole Milk\"",
          "type": "string"
        },
        "productAttributes": {
          "description": "Merchant-provided details about the product, e.g. { \"allergen\": \"peanut\" }. Useful if offerId is not present in Merchant Center. Optional.",
          "type": "object"
        }
      }
    },
    "ReservationReservationItemExtension": {
      "description": "Line item contents for reservation orders like restaurant, haircut etc.",
      "type": "object",
      "properties": {
        "status": {
          "description": "Required: Reservation status.",
          "type": "string",
          "enum": [
            "RESERVATION_STATUS_UNSPECIFIED",
            "PENDING",
            "CONFIRMED",
            "CANCELLED",
            "FULFILLED",
            "CHANGE_REQUESTED",
            "REJECTED"
          ]
        },
        "userVisibleStatusLabel": {
          "description": "Required: User visible label/string for the status. Max allowed length is 50 chars.",
          "type": "string"
        },
        "type": {
          "description": "Type of reservation. May be unset if none of the type options is applicable.",
          "type": "string",
          "enum": [
            "RESERVATION_TYPE_UNSPECIFIED",
            "RESTAURANT",
            "HAIRDRESSER"
          ]
        },
        "reservationTime": {
          "description": "Time when the service/event is scheduled to occur. Can be a time range, a date, or an exact date time.",
          "$ref": "#/definitions/Time"
        },
        "userAcceptableTimeRange": {
          "description": "Time range that is acceptable to the user.",
          "$ref": "#/definitions/Time"
        },
        "confirmationCode": {
          "description": "Confirmation code for this reservation.",
          "type": "string"
        },
        "partySize": {
          "description": "The number of people.",
          "type": "integer",
          "format": "int32"
        },
        "staffFacilitators": {
          "description": "Staff facilitators who will be servicing the reservation. Ex. The hairstylist.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReservationStaffFacilitator"
          }
        },
        "location": {
          "description": "Location of the service/event.",
          "$ref": "#/definitions/V2Location"
        }
      }
    },
    "ReservationStaffFacilitator": {
      "description": "Information about service person.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The staff facilitator's name. Ex. \"John Smith\"",
          "type": "string"
        },
        "image": {
          "description": "Performer's images.",
          "$ref": "#/definitions/V2UiElementsImage"
        }
      }
    },
    "PaymentData": {
      "description": "Payment data related to an order.",
      "type": "object",
      "properties": {
        "paymentResult": {
          "description": "Payment result that's used by integrator for completing a transaction. This field will be populated by Actions on Google if the checkout experience is managed by Actions-on-Google.",
          "$ref": "#/definitions/PaymentResult"
        },
        "paymentInfo": {
          "description": "Payment information regarding the order that's useful for user facing interaction.",
          "$ref": "#/definitions/PaymentInfo"
        }
      }
    },
    "PaymentResult": {
      "description": "Payment result used by integrator for completing a transaction.",
      "type": "object",
      "properties": {
        "googlePaymentData": {
          "description": "Google provided payment method data. If your payment processor is listed as Google supported payment processor here: https://developers.google.com/pay/api/ Navigate to your payment processor through the link to find out more details. Otherwise, refer to following documentation for payload details. https://developers.google.com/pay/api/payment-data-cryptography",
          "type": "string"
        },
        "merchantPaymentMethodId": {
          "description": "Merchant/Action provided payment method chosen by user.",
          "type": "string"
        }
      }
    },
    "PaymentInfo": {
      "description": "Payment information regarding the order being made. This proto captures information that's useful for user facing interaction.",
      "type": "object",
      "properties": {
        "paymentMethodDisplayInfo": {
          "description": "The display info of the payment method used for the transaction.",
          "$ref": "#/definitions/PaymentMethodDisplayInfo"
        },
        "paymentMethodProvenance": {
          "description": "Provenance of the payment method used for the transaction. User may have registered the same payment method with both google and merchant.",
          "type": "string",
          "enum": [
            "PAYMENT_METHOD_PROVENANCE_UNSPECIFIED",
            "PAYMENT_METHOD_PROVENANCE_GOOGLE",
            "PAYMENT_METHOD_PROVENANCE_MERCHANT"
          ]
        }
      }
    },
    "PaymentMethodDisplayInfo": {
      "description": "Payment result used by integrator for completing a transaction.",
      "type": "object",
      "properties": {
        "paymentType": {
          "description": "The type of the payment.",
          "type": "string",
          "enum": [
            "PAYMENT_TYPE_UNSPECIFIED",
            "PAYMENT_CARD",
            "BANK",
            "LOYALTY_PROGRAM",
            "CASH",
            "GIFT_CARD",
            "WALLET"
          ]
        },
        "paymentMethodDisplayName": {
          "description": "User visible name of the payment method. For example, VISA **** 1234 Checking acct **** 5678",
          "type": "string"
        },
        "paymentMethodVoiceName": {
          "description": "Payment method name to be spoken out to the user for voice-only assistant devices. For example, \"visa ending in one two three four\", or \"checking account ending in five six seven eight\". Note: This is the voice-optimized string to be used instead of the payment_method_display_name for voice-only assistant devices. If this string is not set, payment_method_display_name will instead be spoken out to the user.",
          "type": "string"
        }
      }
    },
    "Promotion": {
      "description": "Promotions/Offers that were added to the cart.",
      "type": "object",
      "properties": {
        "coupon": {
          "description": "Required: Coupon code applied to this offer.",
          "type": "string"
        }
      }
    },
    "PurchasePurchaseOrderExtension": {
      "description": "Order extension for purchase vertical. These properties are applicable to all line items inside order, unless overridden in a line item.",
      "type": "object",
      "properties": {
        "status": {
          "description": "Required: Overall Status for the order.",
          "type": "string",
          "enum": [
            "PURCHASE_STATUS_UNSPECIFIED",
            "READY_FOR_PICKUP",
            "SHIPPED",
            "DELIVERED",
            "OUT_OF_STOCK",
            "IN_PREPARATION",
            "CREATED",
            "CONFIRMED",
            "REJECTED",
            "RETURNED",
            "CANCELLED",
            "CHANGE_REQUESTED"
          ]
        },
        "userVisibleStatusLabel": {
          "description": "User visible label/string for the status. Max allowed length is 50 chars.",
          "type": "string"
        },
        "type": {
          "description": "Required: Type of purchase.",
          "type": "string",
          "enum": [
            "PURCHASE_TYPE_UNSPECIFIED",
            "RETAIL",
            "FOOD",
            "GROCERY",
            "MOBILE_RECHARGE"
          ]
        },
        "returnsInfo": {
          "description": "Return info for the order.",
          "$ref": "#/definitions/PurchasePurchaseReturnsInfo"
        },
        "fulfillmentInfo": {
          "description": "Fulfillment info for the order.",
          "$ref": "#/definitions/PurchasePurchaseFulfillmentInfo"
        },
        "purchaseLocationType": {
          "description": "Location of the purchase (in-store / online)",
          "type": "string",
          "enum": [
            "UNSPECIFIED_LOCATION",
            "ONLINE_PURCHASE",
            "INSTORE_PURCHASE"
          ]
        },
        "errors": {
          "description": "Optional: Errors because of which this order was rejected.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchasePurchaseError"
          }
        },
        "extension": {
          "description": "Any extra fields exchanged between merchant and google. Note: Use of this extension is highly discouraged. Based on the use-case/circumstances, consider one of the following: 1. Define fields in the PurchaseOrderExtension if it could be used for other use-cases (ie. generic capability/functionality). 2. Use vertical_extension if it is specific to a custom, non-generic use-case/feature.",
          "type": "object"
        }
      }
    },
    "PurchasePurchaseError": {
      "description": "Errors that a purchase order can be rejected for.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Required: This represents the granular reason why an order gets rejected by the merchant.",
          "type": "string",
          "enum": [
            "ERROR_TYPE_UNSPECIFIED",
            "NOT_FOUND",
            "INVALID",
            "AVAILABILITY_CHANGED",
            "PRICE_CHANGED",
            "INCORRECT_PRICE",
            "REQUIREMENTS_NOT_MET",
            "TOO_LATE",
            "NO_CAPACITY",
            "NO_COURIER_AVAILABLE",
            "INELIGIBLE",
            "OUT_OF_SERVICE_AREA",
            "CLOSED",
            "PROMO_NOT_APPLICABLE",
            "PROMO_NOT_RECOGNIZED",
            "PROMO_EXPIRED",
            "PROMO_USER_INELIGIBLE",
            "PROMO_ORDER_INELIGIBLE",
            "UNAVAILABLE_SLOT",
            "FAILED_PRECONDITION",
            "PAYMENT_DECLINED",
            "MERCHANT_UNREACHABLE",
            "ACCOUNT_LINKING_FAILED"
          ]
        },
        "description": {
          "description": "Additional error description.",
          "type": "string"
        },
        "entityId": {
          "description": "Entity Id that corresponds to the error. Example this can correspond to LineItemId / ItemOptionId.",
          "type": "string"
        },
        "updatedPrice": {
          "description": "Relevant in case of PRICE_CHANGED / INCORRECT_PRICE error type.",
          "$ref": "#/definitions/PriceAttribute"
        },
        "availableQuantity": {
          "description": "Available quantity now. Applicable in case of AVAILABILITY_CHANGED.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TicketTicketOrderExtension": {
      "description": "Order contents for ticket orders like movie, sports etc.",
      "type": "object",
      "properties": {
        "ticketEvent": {
          "description": "The event applied to all line item tickets.",
          "$ref": "#/definitions/TicketTicketEvent"
        }
      }
    },
    "TicketTicketEvent": {
      "description": "Represents a single event.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Required: Type of the ticket event, e.g. movie, concert.",
          "type": "string",
          "enum": [
            "EVENT_TYPE_UNKNOWN",
            "MOVIE",
            "CONCERT",
            "SPORTS"
          ]
        },
        "name": {
          "description": "Required: Name of the event. For example, if the event is a movie, this should be the movie name.",
          "type": "string"
        },
        "description": {
          "description": "Description of the event.",
          "type": "string"
        },
        "url": {
          "description": "Url to the event info.",
          "type": "string"
        },
        "location": {
          "description": "The location where the event is happening, or an organization is located.",
          "$ref": "#/definitions/V2Location"
        },
        "eventCharacters": {
          "description": "The characters related to this event. It can be directors or actors of a movie event, or performers of a concert, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TicketEventCharacter"
          }
        },
        "startDate": {
          "description": "Start time.",
          "$ref": "#/definitions/Time"
        },
        "endDate": {
          "description": "End time.",
          "$ref": "#/definitions/Time"
        },
        "doorTime": {
          "description": "Entry time, which might be different from the event start time. e.g. the event starts at 9am, but entry time is 8:30am.",
          "$ref": "#/definitions/Time"
        }
      }
    },
    "TicketEventCharacter": {
      "description": "One event character, e.g. organizer, performer etc.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the event character, e.g. actor or director.",
          "type": "string",
          "enum": [
            "TYPE_UNKNOWN",
            "ACTOR",
            "PERFORMER",
            "DIRECTOR",
            "ORGANIZER"
          ]
        },
        "name": {
          "description": "Name of the character.",
          "type": "string"
        },
        "image": {
          "description": "Character's images.",
          "$ref": "#/definitions/V2UiElementsImage"
        }
      }
    },
    "UserNotification": {
      "description": "Optional user notification to display as part of the Order update.",
      "type": "object",
      "properties": {
        "title": {
          "description": "The title for the user notification. Max allowed length is 30 chars.",
          "type": "string"
        },
        "text": {
          "description": "The contents of the notification. Max allowed length is 100 chars.",
          "type": "string"
        }
      }
    },
    "NextScene": {
      "description": "Represents the scene to be executed next.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the scene to be executed next.",
          "type": "string"
        }
      }
    },
    "Session": {
      "description": "Contains information on the current conversation session",
      "type": "object",
      "properties": {
        "id": {
          "description": "Required. Globally unique ID of the current conversation session. This field is read-only.",
          "type": "string"
        },
        "params": {
          "description": "Required. List of all parameters collected from forms and intents during the session. Key is the parameter name. Parameters defined here will be merged with parameters already defined in the session. Parameters with a null value will be removed from the session.",
          "type": "object"
        },
        "typeOverrides": {
          "description": "Optional. Types scoped to the session. Session type defines can supplement or replace existing types. Type names must be unique.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypeOverride"
          }
        },
        "languageCode": {
          "description": "Language of the current conversation session. Follows IETF BCP-47 language code http://www.rfc-editor.org/rfc/bcp/bcp47.txt. This could be different from user locale if the action uses multi-language features. For example, when handler_response.expected.language_code is set, it changes the conversation language for all following turns, which will be reflected in this field.",
          "type": "string"
        }
      }
    },
    "TypeOverride": {
      "description": "Represents an override for a type.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. Name of the type to supplement or override.",
          "type": "string"
        },
        "mode": {
          "description": "Required. How this type should be merged with other type values.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "TYPE_REPLACE",
            "TYPE_MERGE"
          ]
        },
        "synonym": {
          "$ref": "#/definitions/SynonymType"
        }
      }
    },
    "SynonymType": {
      "description": "Represents a type with synonyms.",
      "type": "object",
      "properties": {
        "entries": {
          "description": "Required. List of entries for the synonym type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entry"
          }
        }
      }
    },
    "Entry": {
      "description": "Represents a entry for a synonym type.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. Name of the entry (e.g. \"bicycle\"). The entry in this field must be included in repeated synonyms field to be recogonized as a valid type value.",
          "type": "string"
        },
        "synonyms": {
          "description": "Required. List of synonyms for the entry (e.g. \"bike\", \"cycle\").",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "display": {
          "description": "Optional. The item display's information.",
          "$ref": "#/definitions/EntryDisplay"
        }
      }
    },
    "EntryDisplay": {
      "type": "object",
      "properties": {
        "title": {
          "description": "Required. Title of the item. When tapped, this text will be posted back to the conversation verbatim as if the user had typed it. Each title must be unique among the set of collection items.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Body text of the card.",
          "type": "string"
        },
        "image": {
          "description": "Optional. The image to display.",
          "$ref": "#/definitions/Image"
        },
        "footer": {
          "description": "Optional. Footer text for the browsing collection item, displayed below the description. Single line of text, truncated with an ellipsis.",
          "type": "string"
        },
        "openUrl": {
          "description": "URL of document associated with browsing carousel item. Required for browsing carousel.",
          "$ref": "#/definitions/OpenUrl"
        }
      }
    },
    "User": {
      "description": "Represents the user making a request to the Action.",
      "type": "object",
      "properties": {
        "locale": {
          "description": "Primary locale setting of the user making the request. Follows IETF BCP-47 language code http://www.rfc-editor.org/rfc/bcp/bcp47.txt However, the script subtag is not included.",
          "type": "string"
        },
        "params": {
          "description": "Optional. List of all parameters associated with the current user.",
          "type": "object"
        },
        "accountLinkingStatus": {
          "description": "Whether the user account is linked to the app.",
          "type": "string",
          "enum": [
            "ACCOUNT_LINKING_STATUS_UNSPECIFIED",
            "NOT_LINKED",
            "LINKED"
          ]
        },
        "verificationStatus": {
          "description": "Indicates the verification status of the user.",
          "type": "string",
          "enum": [
            "USER_VERIFICATION_STATUS_UNSPECIFIED",
            "GUEST",
            "VERIFIED"
          ]
        },
        "lastSeenTime": {
          "description": "The timestamp of the last interaction with this user. This field will be omitted if the user has not interacted with the agent before.",
          "type": "string",
          "format": "google-datetime"
        },
        "engagement": {
          "description": "The engagement of the current user including any subscriptions to intents.",
          "$ref": "#/definitions/Engagement"
        },
        "packageEntitlements": {
          "description": "User's entitlements related to the Android package associated with the current action.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageEntitlements"
          }
        }
      }
    },
    "Engagement": {
      "description": "Provides additional read-only information about what engagement mechanisms the current user has registered for. For example, it can be useful to know what intents the user is already subscribed to in order to avoid asking them to subscribe to the same intent again. i.e. This information can be used to conditionally route to a scene to set up DailyUpdates or PushNotifications only if the user has not subscribed already.",
      "type": "object",
      "properties": {
        "pushNotificationIntents": {
          "description": "Contains a list of intents which the user has enabled push notification for.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IntentSubscription"
          }
        },
        "dailyUpdateIntents": {
          "description": "Contains a list of intents which the user has enabled daily update for.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IntentSubscription"
          }
        }
      }
    },
    "IntentSubscription": {
      "description": "Describes an existing IntentSubscription.",
      "type": "object",
      "properties": {
        "intent": {
          "description": "Name of the intent which is subscribed to.",
          "type": "string"
        },
        "contentTitle": {
          "description": "A short description of the subscription. It is used as the notification's label and when Assistant is requesting permission from the user.",
          "type": "string"
        }
      }
    },
    "PackageEntitlements": {
      "description": "A List of user's entitlements related to a package name.",
      "type": "object",
      "properties": {
        "packageName": {
          "description": "The Android package name specified in the action package.",
          "type": "string"
        },
        "entitlements": {
          "description": "The user's entitlements for the given package.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entitlement"
          }
        }
      }
    },
    "Entitlement": {
      "description": "Defines a user's digital entitlement.",
      "type": "object",
      "properties": {
        "sku": {
          "description": "Product sku. Package name for paid app, suffix of Finsky docid for in-app purchase and in-app subscription. Match getSku() in Play InApp Billing API.",
          "type": "string"
        },
        "skuType": {
          "description": "The type of SKU.",
          "type": "string",
          "enum": [
            "SKU_TYPE_UNSPECIFIED",
            "IN_APP",
            "SUBSCRIPTION",
            "APP"
          ]
        },
        "inAppDetails": {
          "description": "Only present for in-app purchase and in-app subs.",
          "$ref": "#/definitions/SignedData"
        }
      }
    },
    "SignedData": {
      "type": "object",
      "properties": {
        "inAppPurchaseData": {
          "description": "Contains all inapp purchase data in JSON format. See details in table 6 of https://developer.android.com/google/play/billing/billing_reference.html.",
          "type": "object"
        },
        "inAppDataSignature": {
          "description": "Matches IN_APP_DATA_SIGNATURE from getPurchases() method in Play InApp Billing API.",
          "type": "string"
        }
      }
    },
    "Home": {
      "description": "Represents the HomeGraph structure that the user's target device belongs to.",
      "type": "object",
      "properties": {
        "params": {
          "description": "Optional. List of parameters associated with the HomeGraph structure the target device belongs to.",
          "type": "object"
        }
      }
    },
    "Device": {
      "description": "Represents the device the user is using to make a request to the Action.",
      "type": "object",
      "properties": {
        "capabilities": {
          "description": "Required. the capabilities of the device making a request to the Action.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "UNSPECIFIED",
              "SPEECH",
              "RICH_RESPONSE",
              "LONG_FORM_AUDIO",
              "INTERACTIVE_CANVAS",
              "WEB_LINK"
            ]
          }
        }
      }
    },
    "Context": {
      "description": "Contains context information when user makes query. Such context includes but not limited to info about active media session, state of canvas web app, etc.",
      "type": "object",
      "properties": {
        "media": {
          "description": "Contains context information about current active media session.",
          "$ref": "#/definitions/MediaContext"
        },
        "canvas": {
          "description": "Contains context information about current canvas.",
          "$ref": "#/definitions/CanvasContext"
        }
      }
    },
    "MediaContext": {
      "description": "Contains context information about current active media session.",
      "type": "object",
      "properties": {
        "progress": {
          "description": "Media progress of current active media file.",
          "type": "string",
          "format": "google-duration"
        }
      }
    },
    "CanvasContext": {
      "description": "Contains context information about current canvas.",
      "type": "object",
      "properties": {
        "state": {
          "description": "Optional. State set by 3P Interactive Canvas app. This is only set for request, not for response. For example, if this is a recipe app, the state can be a value of struct : { \"current_page\" : 5, \"last_page\" : 3, } The size limit is 50KB."
        }
      }
    },
    "HandlerResponse": {
      "description": "Represents a response sent from a developer's fulfillment to Actions on Google.",
      "type": "object",
      "properties": {
        "prompt": {
          "description": "Optional. Represents the prompts to be sent to the user, these prompts will be appended to previously added messages unless explicitly overwritten.",
          "$ref": "#/definitions/Prompt"
        },
        "scene": {
          "description": "Optional. Represents the current and next scene. If `Scene.next` is set the runtime will immediately transition to the specified scene.",
          "$ref": "#/definitions/Scene"
        },
        "session": {
          "description": "Optional. Describes data for the current session, session parameters can be created, updated, or removed by the fulfillment.",
          "$ref": "#/definitions/Session"
        },
        "user": {
          "description": "Optional. Use to specify user parameters to send back.",
          "$ref": "#/definitions/User"
        },
        "home": {
          "description": "Optional. Used to specify parameters related to the HomeGraph structure that the target device belongs to. See https://developers.google.com/actions/smarthome/concepts/homegraph.",
          "$ref": "#/definitions/Home"
        },
        "device": {
          "description": "Optional. Use to move between Assistant devices the user has access to.",
          "$ref": "#/definitions/Device"
        },
        "expected": {
          "description": "Optional. Describes the expectations for the next dialog turn.",
          "$ref": "#/definitions/Expected"
        }
      }
    },
    "Expected": {
      "description": "Describes the expectations for the next dialog turn.",
      "type": "object",
      "properties": {
        "speech": {
          "description": "List of phrases the Action expects from the user's utterance for speech biasing. Up to 1000 phrases are allowed. Note: This field has the same meaning as ExpectedInput.speech_biasing_hints in the v2 API.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "type": "object",
  "properties": {
    "request": {
      "$ref": "#/definitions/HandlerRequest"
    },
    "response": {
      "$ref": "#/definitions/HandlerResponse"
    }
  }
}